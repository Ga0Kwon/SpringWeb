# 주석
# application.properties : 스프링 프로젝트 설정 파일
# Spring은 config의 설정 값을 여기서 찾는다.

# 스프링부트는 내장 톰캣 (기본 값 존재 : 내장톰캣 포트 8080)
# JSP(이클립스) 서버 동시 실행시 충돌 주의
# server.port = 바꿀port

# Spring data 스프링이 DB 연결을 관리
# 스프링이 연결을 대신 해줌 => 띄어쓰기 절대 XXX

# Spring data 스프링이 DB 관린
    #1. mysql 드라이버
spring.datasource.driverClassName =com.mysql.cj.jdbc.Driver
    #2. DB URL
spring.datasource.url =jdbc:mysql://localhost:3306/springweb
    #3. DB 계정 ID
spring.datasource.username =root
    #4. DB 계정 password 띄어쓰기 포함!
spring.datasource.password=1234

#JPA 관련 설정
    #5.JPA 실행시 자동으로 create [첫 실행시만 하기] => 기존 데이터 삭제하고 create
# spring.jpa.hibernate.ddl-auto = create
    #6. 기존 데이터를 지우지 않고, 갱신
spring.jpa.hibernate.hbm2ddl.auto = update;
    #7. JPA가 자동으로 작성한 SQL를 console 출력해줌
spring.jpa.properties.hibernate.show_sql =true
spring.jpa.properties.hibernate.format_sql =true


# 로깅 설정
# 1. 기록할 최소 레벨 선택[info 이상 레벨만 기록]
logging.level.root = info;

# 2. 기록할 파일 경로 [경로 / 파일명.log]
logging.file.name = C:/java/spring.log

# OAuth2 관련된 설정값

# 1.구글 클라우드 플랫폼에서 신청한 oauth 클라이언트 정보
    # 1) 발급된 구글 클라이언트 id 대입
# spring.security.oauth2.client.registration.google.client-id = 발급된 클라이언트 아이디(oauth2)
spring.security.oauth2.client.registration.google.client-id =27107846923-unqisjhda5obvu2ov6vr8jjq5lpg59uf.apps.googleusercontent.com

    # 2) 발급된 구글 클라이언트 pw 대입
spring.security.oauth2.client.registration.google.client-secret =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

    # 3) 신청해서 요청한 동의항복[요청할 회원정보들] : 구글 cloud에서 신청한 동의 항목 내 명시된 변수/필드명 작성
spring.security.oauth2.client.registration.google.scope =email,profile

# 2. 카카오 개발자센터에서 신청한 카카오 로그인 정보
    #1) REST API 넣기[앱키]
spring.security.oauth2.client.registration.kakao.client-id =bb6f5cb1f2012171edc51b7fb8480b02
    #2) 보안 -> client-secret-> 코드
spring.security.oauth2.client.registration.kakao.client-secret =pmE7SZH3HVB75lNd6fRDFBU9stACzIRA
    #3) 가져올 변수명[카카오의 개인정보 변수명이랑 똑같이 작성해야한다.]
spring.security.oauth2.client.registration.kakao.scope =profile_nickname,account_email

# 추가 설정1
# 1. 클라이언트 이름 정하기
spring.security.oauth2.client.registration.kakao.client-name =kakao
# 2. 인증 토큰 요청시 HTTP 메소드 방식
spring.security.oauth2.client.registration.kakao.client-authentication-method =post
# 3. 신청한 redirect-uri
spring.security.oauth2.client.registration.kakao.redirect-uri ={baseUrl}/{action}/oauth2/code/{registrationId}
# 4. 토큰 타입의 JSON 형식 [ 고정 ]
spring.security.oauth2.client.registration.kakao.authorization-grant-type=authorization_code
# 추가 설정2
# 1. 동의항목 요청시 사용되는 uri
spring.security.oauth2.client.provider.kakao.authorization-uri=https://kauth.kakao.com/oauth/authorize
# 2. 토큰 결과 요청시 사용되는 uri
spring.security.oauth2.client.provider.kakao.token-uri =https://kauth.kakao.com/oauth/token
# 3. 회원정보가 포함된 인증정보 [ 회원번호,인증시간 등등] 요청시 사용되는 uri
spring.security.oauth2.client.provider.kakao.user-info-uri =https://kapi.kakao.com/v2/user/me
# 4. 요청시 회원계정 정보 의 JSON 이름[키] = 동의항목에서 신청한 정보가 들어있는 키 이름
spring.security.oauth2.client.provider.kakao.user-name-attribute=kakao_account


# 3. 네이버 개발자센터에서 신청한 카카오 로그인 정보
#1) REST API 넣기[앱키]
spring.security.oauth2.client.registration.naver.client-id =0P71DPfkPq4t_LryVTAA
#2) 보안 -> client-secret-> 코드
spring.security.oauth2.client.registration.naver.client-secret =zqATgVRjtm
#3) 가져올 변수명[네이버의 개인정보 변수명이랑 똑같이 작성해야한다.]
spring.security.oauth2.client.registration.naver.scope =nickname,email

spring.security.oauth2.client.registration.naver.client-name =naver
#spring.security.oauth2.client.registration.naver.client-authentication-method =post
spring.security.oauth2.client.registration.naver.redirect-uri ={baseUrl}/{action}/oauth2/code/{registrationId}
spring.security.oauth2.client.registration.naver.authorization-grant-type=authorization_code

spring.security.oauth2.client.provider.naver.authorization-uri=https://nid.naver.com/oauth2.0/authorize
spring.security.oauth2.client.provider.naver.token-uri =https://nid.naver.com/oauth2.0/token
spring.security.oauth2.client.provider.naver.user-info-uri =https://openapi.naver.com/v1/nid/me
spring.security.oauth2.client.provider.naver.user-name-attribute=response

# 스프링부트 2.6이상부터는 추가된 view 컨트롤러가 있을경우 매칭해주는 설정
spring.mvc.pathmatch.matching-strategy = ant_path_matcher